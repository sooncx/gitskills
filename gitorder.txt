git init
git add 文件名（可以包括多个文件 空格分开）
git commit -m "描述"
git diff 文件名 查看不同

第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。



git status 查看仓库当前状态
git log 查看提交日志，从最近开始
git log --pretty=oneline 一行显示一条日志
git reset --hard HEAD^ 回退到上个版本 ^的个数表示回退几个版本，也可以用HEAD~9

回退后反悔怎么办，想回到没回退的最新版
找到最新版版本号
git reset --hard 版本号前几位即可 如版本号为e475afc93c209a690c39c13a46716e8fa000c366
则 git reset --hard e475

git reflog 记录你的所有用过的命令，可以帮助你找到对应的版本号

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
git checkout --文件名 撤销所有修改，恢复到上个add或commit之前的样子。
一种是readme.txt自修改后还没有add被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经add到暂存区后没有commit，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

git rm 文件名 删除文件
当你手动删除了某文件，git会提醒您，这时候你可以用git rm 文件名来删除工作区的文件，然后commit就可以同步删除版本库的文件
如果你想恢复该文件，git checkout -- 文件名可以恢复



要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；


要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>或者git switch <name>

创建+切换分支：git checkout -b <name>或者git switch -c <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

git stash 储存当前工作现场

git stash list 查看储存的所有工作现场

git stash apply 恢复工作现场 git stash drop 删除stash内容

git stash pop 恢复的同时把stash内容也删了

git cherry-pick HEAD 根据提交版本号HEAD复制一个特定的提交到当前分支

因此，多人协作的工作模式通常是这样：

首先，可以试图用git push origin <branch-name>推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结
查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
